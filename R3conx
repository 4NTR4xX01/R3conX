#!/bin/bash

# === Colores ===
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
WHITE="\e[97m"
RESET="\e[0m"

echo -e "
${MAGENTA}
 _______  ______   _______  _______  _                
(  ____ )/ ___  \ (  ____ \(  ___  )( (    /||\     /|
| (    )|\/   \  \| (    \/| (   ) ||  \  ( |( \   / )
| (____)|   ___) /| |      | |   | ||   \ | | \ (_) / 
|     __)  (___ ( | |      | |   | || (\ \) |  ) _ (  
| (\ (         ) \| |      | |   | || | \   | / ( ) \ 
| ) \ \__/\___/  /| (____/\| (___) || )  \  |( /   \ )
|/   \__/\______/ (_______/(_______)|/    )_)|/     \|
                        author:4NTR4xX
${RESET}
"

if [ -z "$1" ]; then
    echo -e "${RED}❌ No se proporcionó un dominio. Usa el formato: ${GREEN}R3conX dominio.com${RESET}"
    exit 1
fi

domain="$1"

echo -e "${CYAN}=========================================================="
echo -e "                        📇 WHOIS Info                    "
echo -e "==========================================================${RESET}"

whois_data=$(whois "$domain" 2>/dev/null)

registrar=$(echo "$whois_data" | grep -iE "^Registrar:|^Registrar Name:" | head -1 | cut -d: -f2- | xargs)

creation_date=$(echo "$whois_data" | grep -iE "Created On:|Creation Date:" | head -1 | cut -d: -f2- | xargs)
expiration_date=$(echo "$whois_data" | grep -iE "Expiration Date:|Expiry Date:" | head -1 | cut -d: -f2- | xargs)

admin_block=$(echo "$whois_data" | awk '/Administrative Contact:/,/(Technical Contact:|Billing Contact:|Name Servers:)/')
admin_name=$(echo "$admin_block" | grep -i "Name:" | head -1 | cut -d: -f2- | xargs)
admin_city=$(echo "$admin_block" | grep -i "City:" | head -1 | cut -d: -f2- | xargs)
admin_state=$(echo "$admin_block" | grep -i "State:" | head -1 | cut -d: -f2- | xargs)
admin_country=$(echo "$admin_block" | grep -i "Country:" | head -1 | cut -d: -f2- | xargs)

tech_block=$(echo "$whois_data" | awk '/Technical Contact:/,/(Billing Contact:|Name Servers:)/')
tech_name=$(echo "$tech_block" | grep -i "Name:" | head -1 | cut -d: -f2- | xargs)
tech_city=$(echo "$tech_block" | grep -i "City:" | head -1 | cut -d: -f2- | xargs)
tech_state=$(echo "$tech_block" | grep -i "State:" | head -1 | cut -d: -f2- | xargs)
tech_country=$(echo "$tech_block" | grep -i "Country:" | head -1 | cut -d: -f2- | xargs)

[ -n "$registrar" ] && echo -e "🏢 Registrador: ${WHITE}$registrar${RESET}"
[ -n "$creation_date" ] && echo -e "📅 Fecha de creación: ${WHITE}$creation_date${RESET}"
[ -n "$expiration_date" ] && echo -e "📅 Expira el: ${WHITE}$expiration_date${RESET}"


if [ -n "$admin_name" ]; then
    echo -e "👤 Contacto administrativo:"
    echo -e "   └─ Nombre:  ${WHITE}$admin_name${RESET}"
    echo -e "   └─ Ciudad:  ${WHITE}$admin_city${RESET}"
    echo -e "   └─ Estado:  ${WHITE}$admin_state${RESET}"
    echo -e "   └─ País:    ${WHITE}$admin_country${RESET}"
fi

if [ -n "$tech_name" ]; then
    echo -e "🛠️ Contacto técnico:"
    echo -e "   └─ Nombre:  ${WHITE}$tech_name${RESET}"
    echo -e "   └─ Ciudad:  ${WHITE}$tech_city${RESET}"
    echo -e "   └─ Estado:  ${WHITE}$tech_state${RESET}"
    echo -e "   └─ País:    ${WHITE}$tech_country${RESET}"
fi

# DNS
dns_lines=$(echo "$whois_data" | grep -E '^\s*DNS:' | sed -E 's/^\s*DNS:\s*//')

if [ -n "$dns_lines" ]; then
    echo -e "📡 Servidores DNS:"
    echo "$dns_lines" | while read -r line; do
        echo -e "   └─ ${WHITE}$line${RESET}"
    done
else
    echo "❌ No se encontraron servidores DNS"
fi
echo ""

echo -e "${CYAN}=========================================================="
echo -e "                     📥  Registros DNS                    "
echo -e "==========================================================${RESET}"

dig_response=$(dig "$domain" A +noall +answer)


if [ -n "$dig_response" ]; then
    echo -e "📥 Registros A obtenidos con dig:"
    echo "$dig_response" | while read -r line; do
        echo -e "   └─ ${WHITE}$line${RESET}"
    done
else
    echo "❌ No se encontraron registros A con dig"
fi


echo ""

echo -e "${CYAN}=========================================================="
echo -e "                        🌐 Whatweb Scan                   "
echo -e "==========================================================${RESET}"

whatweb_output=$(whatweb -a 3 "$domain" 2>/dev/null)

echo "$whatweb_output" | while IFS= read -r line; do
    url=$(echo "$line" | awk '{print $1}')
    status=$(echo "$line" | grep -o "\[[0-9]* .*]") 
    ip=$(echo "$line" | grep -o "IP\[[^]]*\]" | sed 's/IP\[//;s/]//')
    country=$(echo "$line" | grep -o "Country\[[^]]*\]" | sed 's/Country\[//;s/]//')
    server=$(echo "$line" | grep -o "HTTPServer\[[^]]*\]" | sed 's/HTTPServer\[//;s/]//')
    cms=$(echo "$line" | grep -o "WordPress\[[^]]*\]" | sed 's/WordPress\[//;s/]//')
    title=$(echo "$line" | grep -o "Title\[[^]]*\]" | sed 's/Title\[//;s/]//')
    email=$(echo "$line" | grep -o "Email\[[^]]*\]" | sed 's/Email\[//;s/]//')

    echo -e "${BLUE}🔗 $url${RESET}"
    [ -n "$status" ] && echo -e "   ├─ 🔁 ${WHITE}$status${RESET}"
    [ -n "$ip" ] && echo -e "   ├─ 🌐 IP: ${WHITE}$ip${RESET}"
    [ -n "$server" ] && echo -e "   ├─ 📦 Server: ${WHITE}$server${RESET}"
    [ -n "$country" ] && echo -e "   ├─ 🌍 Country: ${WHITE}$country${RESET}"
    [ -n "$email" ] && echo -e "   ├─ 📧 Email: ${WHITE}$email${RESET}"
    [ -n "$cms" ] && echo -e "   ├─ 🧱 CMS: ${WHITE}$cms${RESET}"
    [ -n "$title" ] && echo -e "   └─ 📖 Title: ${WHITE}$title${RESET}"
    echo ""
done

echo ""

echo -e "${CYAN}=========================================================="
echo -e "                   🚦 Load Balancer Detection             "
echo -e "==========================================================${RESET}"

lbd_salida=$(lbd "$domain" 2>/dev/null)


if echo "$lbd_salida" | grep -q "Checking for DNS-Loadbalancing: FOUND"; then
    echo "✅ DNS Load Balancing detectado"
    echo "$lbd_salida" | grep "$domain has address"
else
    echo "❌ No se detectó DNS Load Balancing"
fi

if echo "$lbd_salida" | grep -A1 "Checking for HTTP-Loadbalancing \[Server\]" | grep -q "FOUND"; then
    echo "✅ HTTP Load Balancing [Server] detectado"
else
    echo "❌ No se detectó HTTP Load Balancing [Server]"
fi

if echo "$lbd_salida" | grep -A1 "Checking for HTTP-Loadbalancing \[Date\]" | grep -q "FOUND"; then
    echo "✅ HTTP Load Balancing [Date] detectado"
else
    echo "❌ No se detectó HTTP Load Balancing [Date]"
fi

echo ""

echo -e "${CYAN}=========================================================="
echo -e "                           🔐 WAF                         "
echo -e "==========================================================${RESET}"

salida=$(wafw00f "$domain" 2>&1)
linea_waf=$(echo "$salida" | grep -i "is behind")
waf=$(echo "$linea_waf" | sed -E 's/.*is behind (.*) WAF.*/\1/' | xargs)

if [ -n "$waf" ]; then
    echo -e "${YELLOW}🔐 WAF detectado: ${WHITE}$waf${RESET}"
else
    echo -e "${GREEN}✅ No se detectó WAF${RESET}"
fi

echo ""

echo -e "${CYAN}=========================================================="
echo -e "                         🔒 SSL/TLS                       "
echo -e "==========================================================${RESET}"

sslyze "$domain" 2>/dev/null | awk '
BEGIN { cert_section=0; tls12=0; tls13=0; }
/Certificate Chain #1 \(RSAPublicKey\)/ { cert_section=1 }
/SHA1 Fingerprint:/ && cert_section { print "🔐 SHA1 Fingerprint: " $NF }
/Common Name:/ && cert_section { print "🌐 Common Name: " $NF }
/Issuer:/ && cert_section { print "🏢 Issuer: " substr($0, index($0,$2)) }
/Not Before:/ && cert_section { print "📅 Válido desde: " $NF }
/Not After:/ && cert_section { print "📅 Válido hasta: " $NF }
/SubjAltName - DNS Names:/ && cert_section { gsub(/\[|\]|,|'\''/, "", $0); print "📌 DNS Alternativos: " substr($0, index($0,$5)) }
/Certificate Transparency:/ && cert_section { print "🧾 Certificate Transparency: " substr($0, index($0,$1)) }
/TLS 1\.2 Cipher Suites:/ { tls12=1 }
/TLS 1\.3 Cipher Suites:/ { tls13=1; tls12=0 }
/The server accepted the following/ && (tls12 || tls13) { show=1; next }
/^\s*$/ { show=0 }
show && tls12 { print "🔐 TLS 1.2: " $1 }
/show && tls13/ { print "🔐 TLS 1.3: " $1 }
'

echo ""

echo -e "${CYAN}=========================================================="
echo -e "                         🌐 Subdominios                   "
echo -e "==========================================================${RESET}"

subdominios=$(sublist3r -d "$domain" 2>/dev/null | sed 's/\x1b\[[0-9;]*m//g' | grep -oE "([a-zA-Z0-9_-]+\.)+$domain" | sort -u)

if [ -n "$subdominios" ]; then
    echo -e "${WHITE}🌐 Subdominios encontrados:${RESET}"
    echo -e "${GREEN}$subdominios${RESET}"
else
    echo -e "${RED}❌ No se encontraron subdominios.${RESET}"
fi

echo ""

echo -e "${CYAN}=========================================================="
echo -e "                  📁 Enumeración de Directorios           "
echo -e "==========================================================${RESET}"

read -p "¿Deseas buscar directorios en los subdominios encontrados? (s/n): " buscar_dirs
echo ""

if [[ "$buscar_dirs" == "s" || "$buscar_dirs" == "S" ]]; then
    wordlist="/usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt"  
    echo ""
    
    for sub in $subdominios; do
        echo -e "${MAGENTA}🔎 Escaneando $sub ...${RESET}"
        echo ""
        echo -e "${RED}⌛ Esto puede tardar un poco, por favor espera...${RESET}"
        
        if curl -s --head --max-time 5 "https://$sub" | grep -q "200\|301\|302"; then
            gobuster dir -u "https://$sub" -w "$wordlist" --no-error -q -t 20 2>/dev/null | while read -r line; do
                echo -e "   └─ 📁 ${WHITE}$line${RESET}"
            done
        else
            echo -e "   ⚠️  ${RED}No se pudo conectar a $sub${RESET}"
        fi

        echo ""
    done
else
    echo -e "${YELLOW}📁 Búsqueda de directorios omitida por el usuario.${RESET}"
fi

echo ""

echo -e "${CYAN}=========================================================="
echo -e "                   📧 Correos Electrónicos                "
echo -e "==========================================================${RESET}"

theHarvester -d "$domain" -b intelx,yahoo,bing,brave,hunter,github-code 2>/dev/null | \
grep -Eoi "[a-zA-Z0-9._%+-]+@$domain" | sort -u

# Si no encontró nada, muestra mensaje
if [ $? -ne 0 ]; then
    echo "❌ No se encontraron correos electrónicos."
fi
